{"version":3,"sources":["components/Header/Header.js","components/HeroDiv/HeroDiv.js","components/Pokemon/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","id","h2Color","h2Text","score","topScore","onClick","gameRestart","HeroDiv","Pokemon","src","image","alt","name","imgClick","App","state","pokemonList","imgAlreadyClicked","includes","length","setState","alert","push","sort","Math","random","console","log","this","map","pokemonImg","key","clcikCount","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4gDAgCeA,MA7Bf,SAAgBC,GACd,OACE,yBAAKC,UAAU,MAAMC,GAAG,UACtB,yBAAKD,UAAU,YACb,4CAEF,yBAAKA,UAAU,YACb,wBAAIC,GAAG,WAAWD,UAAWD,EAAMG,SAChCH,EAAMI,SAGX,yBAAKH,UAAU,YACb,yBAAKC,GAAG,YACN,sCACU,8BAAOF,EAAMK,OADvB,iBACmD,IACjD,8BAAOL,EAAMM,WAEf,4BACEL,UAAU,6BACVM,QAASP,EAAMQ,aAFjB,oB,MCHKC,MAdf,WACE,OACE,yBAAKP,GAAG,UAAUD,UAAU,eAC1B,yBAAKC,GAAG,WACN,4CACA,0G,MCOOQ,MAZf,SAAiBV,GACf,OACE,yBAAKC,UAAU,UACb,yBACEU,IAAKX,EAAMY,MACXC,IAAKb,EAAMc,KACXP,QAAS,kBAAMP,EAAMe,SAASf,EAAME,S,OC2F7Bc,G,iNAxFbC,MAAQ,CACNC,cACAb,MAAO,EACPc,kBAAmB,GACnBb,SAAU,EACVF,OAAQ,8BACRD,QAAS,I,EAGXY,SAAW,SAAAb,GACL,EAAKe,MAAME,kBAAkBC,SAASlB,GACI,IAAxC,EAAKe,MAAME,kBAAkBE,QAC3B,EAAKJ,MAAMZ,MAAQ,EAAKY,MAAMX,UAChC,EAAKgB,SAAS,CACZhB,SAAU,EAAKW,MAAMZ,QAGzBkB,MAAM,4BAAD,OAA6B,EAAKN,MAAMX,SAAxC,OAEL,EAAKgB,SAAS,CACZhB,SAAU,EAAKW,MAAMZ,MACrBA,MAAO,EACPD,OAAQ,uBACRD,QAAS,SAIb,EAAKc,MAAME,kBAAkBK,KAAKtB,GAElC,EAAKoB,SAAS,CACZjB,MAAO,EAAKY,MAAMZ,MAAQ,EAC1BD,OAAQ,wBACRD,QAAS,UAEP,EAAKc,MAAMZ,MAAQ,EAAKY,MAAMX,UAChC,EAAKgB,SAAS,CACZhB,SAAU,EAAKW,MAAMZ,SAK3B,EAAKY,MAAMC,YAAYO,KAAK,kBAAMC,KAAKC,SAAW,KAElDC,QAAQC,IAAI,EAAKZ,MAAME,mBACvBS,QAAQC,IAAI,WAAa,EAAKZ,MAAMZ,Q,EAGtCG,YAAc,WACZe,MAAM,eACN,EAAKD,SAAS,CACZJ,cACAb,MAAO,EACPc,kBAAmB,GACnBb,SAAU,EACVF,OAAQ,8BACRD,QAAS,M,wEAIH,IAAD,OACP,OACE,yBAAKF,UAAU,mBACb,kBAAC,EAAD,CACEI,MAAOyB,KAAKb,MAAMZ,MAClBC,SAAUwB,KAAKb,MAAMX,SACrBF,OAAQ0B,KAAKb,MAAMb,OACnBD,QAAS2B,KAAKb,MAAMd,QACpBK,YAAasB,KAAKtB,cAEpB,kBAAC,EAAD,MACA,yBAAKN,GAAG,eACL4B,KAAKb,MAAMC,YAAYa,IAAI,SAAAC,GAAU,OACpC,kBAAC,EAAD,CACEC,IAAKD,EAAW9B,GAChBA,GAAI8B,EAAW9B,GACfgC,WAAYF,EAAWE,WACvBtB,MAAOoB,EAAWpB,MAClBE,KAAMkB,EAAWlB,KACjBC,SAAU,EAAKA,SACfV,MAAO,EAAKA,gB,GAhFR8B,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.27871715.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <div className=\"row\" id=\"header\">\r\n      <div className=\"col-sm-4\">\r\n        <h1>Clicky Game</h1>\r\n      </div>\r\n      <div className=\"col-sm-4\">\r\n        <h2 id=\"resultH2\" className={props.h2Color}>\r\n          {props.h2Text}\r\n        </h2>\r\n      </div>\r\n      <div className=\"col-sm-4\">\r\n        <div id=\"scroeDiv\">\r\n          <p>\r\n            Score : <span>{props.score}</span> || Top Score:{\" \"}\r\n            <span>{props.topScore}</span>\r\n          </p>\r\n          <button\r\n            className=\"btn btn-primary btnRestart\"\r\n            onClick={props.gameRestart}\r\n          >\r\n            Restart Game\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./HeroDiv.css\";\r\n\r\nfunction HeroDiv() {\r\n  return (\r\n    <div id=\"heroDiv\" className=\"text-center\">\r\n      <div id=\"textDiv\">\r\n        <h1>Clicky Game!</h1>\r\n        <h2>\r\n          Click on Image to get points, but don't click on image more than\r\n          once!!\r\n        </h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeroDiv;\r\n","import React from \"react\";\r\nimport \"./Pokemon.css\";\r\n\r\nfunction Pokemon(props) {\r\n  return (\r\n    <div className=\"imgDiv\">\r\n      <img\r\n        src={props.image}\r\n        alt={props.name}\r\n        onClick={() => props.imgClick(props.id)}\r\n      ></img>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pokemon;\r\n","import React from \"react\";\nimport { Component } from \"react\";\n\nimport Header from \"./components/Header/Header\";\nimport HeroDiv from \"./components/HeroDiv/HeroDiv\";\nimport Pokemon from \"./components/Pokemon/Pokemon\";\nimport pokemonList from \"./pokemonList.json\";\n\nimport \"./App.css\";\n\n// function App() {\nclass App extends Component {\n  state = {\n    pokemonList,\n    score: 0,\n    imgAlreadyClicked: [],\n    topScore: 0,\n    h2Text: \"Click on image to begin !!!\",\n    h2Color: \"\"\n  };\n\n  imgClick = id => {\n    if (this.state.imgAlreadyClicked.includes(id)) {\n      if (this.state.imgAlreadyClicked.length === 9) {\n        if (this.state.score > this.state.topScore) {\n          this.setState({\n            topScore: this.state.score\n          });\n        }\n        alert(`Game Over...Your Score : ${this.state.topScore} `);\n      } else {\n        this.setState({\n          topScore: this.state.score,\n          score: 0,\n          h2Text: \"Incorrect guess !!!!\",\n          h2Color: \"red\"\n        });\n      }\n    } else {\n      this.state.imgAlreadyClicked.push(id);\n\n      this.setState({\n        score: this.state.score + 1,\n        h2Text: \"You guessed right !!!\",\n        h2Color: \"green\"\n      });\n      if (this.state.score > this.state.topScore) {\n        this.setState({\n          topScore: this.state.score\n        });\n      }\n    }\n\n    this.state.pokemonList.sort(() => Math.random() - 0.9);\n\n    console.log(this.state.imgAlreadyClicked);\n    console.log(\"Scroe : \" + this.state.score);\n  };\n\n  gameRestart = () => {\n    alert(\"btn clicked\");\n    this.setState({\n      pokemonList,\n      score: 0,\n      imgAlreadyClicked: [],\n      topScore: 0,\n      h2Text: \"Click on image to begin !!!\",\n      h2Color: \"\"\n    });\n  };\n  // this.setState(prevState => ({ age: prevState.age + 1 }));\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Header\n          score={this.state.score}\n          topScore={this.state.topScore}\n          h2Text={this.state.h2Text}\n          h2Color={this.state.h2Color}\n          gameRestart={this.gameRestart}\n        />\n        <HeroDiv />\n        <div id=\"imgOuterDiv\">\n          {this.state.pokemonList.map(pokemonImg => (\n            <Pokemon\n              key={pokemonImg.id}\n              id={pokemonImg.id}\n              clcikCount={pokemonImg.clcikCount}\n              image={pokemonImg.image}\n              name={pokemonImg.name}\n              imgClick={this.imgClick}\n              score={this.score}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}