{"version":3,"sources":["components/Header/Header.js","components/HeroDiv/HeroDiv.js","components/Pokemon/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","id","score","topScore","HeroDiv","Pokemon","src","image","alt","name","onClick","imgClick","App","state","pokemonList","imgAlreadyClicked","includes","alert","push","setState","sort","Math","random","console","log","this","map","pokemonImg","key","clcikCount","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mpDA8BeA,MA3Bf,SAAgBC,GACZ,OAGQ,yBAAKC,UAAU,MAAMC,GAAG,UACpB,yBAAKD,UAAU,YACX,4CAEJ,yBAAKA,UAAU,YACX,0DAEJ,yBAAKA,UAAU,YACX,yBAAKC,GAAG,YACJ,sCACY,8BAAOF,EAAMG,OADzB,kBAEe,8BAAOH,EAAMI,e,MCHrCC,MAZf,WACI,OACI,yBAAKH,GAAG,UAAUD,UAAU,eAExB,yBAAKC,GAAG,WACJ,4CACA,0G,MCKDI,MAVf,SAAiBN,GAEb,OACO,yBAAKC,UAAU,UACb,yBAAKM,IAAKP,EAAMQ,MAAOC,IAAKT,EAAMU,KAAMC,QAAS,kBAAIX,EAAMY,SAASZ,EAAME,S,OC8DxEW,G,iNA1DXC,MAAM,CACJC,cACAZ,MAAM,EACNa,kBAAmB,GACnBZ,SAAS,G,EAGXQ,SAAW,SAACV,GAEP,EAAKY,MAAME,kBAAkBC,SAASf,GACvCgB,MAAM,wBAEN,EAAKJ,MAAME,kBAAkBG,KAAKjB,GAClC,EAAKkB,SAAS,CACZjB,MAAQ,EAAKW,MAAMX,MAAQ,IAE1B,EAAKW,MAAMX,MAAM,EAAKW,MAAMV,UAC7B,EAAKgB,SAAS,CACZhB,SAAS,EAAKU,MAAMX,SAMpB,EAAKW,MAAMC,YAAYM,KAAK,kBAAMC,KAAKC,SAAW,KAElDC,QAAQC,IAAI,EAAKX,MAAME,mBACvBQ,QAAQC,IAAI,WAAa,EAAKX,MAAMX,Q,wEAQrC,IAAD,OACN,OACE,yBAAKF,UAAU,mBACb,kBAAC,EAAD,CAAQE,MAASuB,KAAKZ,MAAMX,MAAOC,SAAYsB,KAAKZ,MAAMV,WAC1D,kBAAC,EAAD,MACA,yBAAKF,GAAG,eACLwB,KAAKZ,MAAMC,YAAYY,IAAI,SAAAC,GAAU,OACpC,kBAAC,EAAD,CACEC,IAAOD,EAAW1B,GAClBA,GAAM0B,EAAW1B,GACjB4B,WAAcF,EAAWE,WACzBtB,MAASoB,EAAWpB,MACpBE,KAAQkB,EAAWlB,KACnBE,SAAY,EAAKA,SACjBT,MAAS,EAAKA,gB,GAlDR4B,cCCAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e7a71177.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header(props){\r\n    return(\r\n      \r\n        \r\n            <div className=\"row\" id=\"header\">\r\n                <div className=\"col-sm-4\">\r\n                    <h1>Clicky Game</h1>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                    <h2>Click on image to begin !</h2>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                    <div id=\"scroeDiv\">\r\n                        <p>\r\n                            Score : <span>{props.score}</span> ||\r\n                            Top Score: <span>{props.topScore}</span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                \r\n\r\n            </div>\r\n           \r\n      \r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./HeroDiv.css\";\r\n\r\nfunction HeroDiv(){\r\n    return(\r\n        <div id=\"heroDiv\" className=\"text-center\">\r\n            {/* <img src=\"pokemonBackground.jpg\" alt=\"HeroDiv\"></img> */}\r\n            <div id=\"textDiv\">\r\n                <h1>Clicky Game!</h1>\r\n                <h2>Click on Image to get points, but don't click on image more than once!!</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HeroDiv;\r\n","import React from \"react\";\r\nimport \"./Pokemon.css\";\r\n// import data from  \"friends.json\";\r\n\r\nfunction Pokemon(props){\r\n\r\n    return(\r\n           <div className=\"imgDiv\">\r\n             <img src={props.image} alt={props.name} onClick={()=>props.imgClick(props.id)}></img>\r\n           </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Pokemon;","import React from 'react';\nimport {Component} from 'react';\n\nimport Header from \"./components/Header/Header\";\nimport HeroDiv from \"./components/HeroDiv/HeroDiv\";\nimport Pokemon from \"./components/Pokemon/Pokemon\";\nimport pokemonList from \"./pokemonList.json\";\n\nimport './App.css';\n\n// function App() {\n  class App extends Component{\n    state={\n      pokemonList,\n      score:0,\n      imgAlreadyClicked :[],\n      topScore:0\n    };\n    \n    imgClick = (id) => {\n      \n      if(this.state.imgAlreadyClicked.includes(id)){\n        alert(`already img clicked`);\n      }else{\n        this.state.imgAlreadyClicked.push(id);\n        this.setState({\n          score : this.state.score + 1\n        });\n        if(this.state.score>this.state.topScore){\n          this.setState({\n            topScore:this.state.score\n            \n          })\n        }\n      }\n            \n            this.state.pokemonList.sort(() => Math.random() - 0.9);\n           \n            console.log(this.state.imgAlreadyClicked);\n            console.log(\"Scroe : \" + this.state.score);\n     \n    };\n\n    // shuffle=pokemonList=> {\n    //   this.state.pokemonList.sort(() => Math.random() - 0.5);\n    // }\n\n  render(){\n    return (\n      <div className=\"container-fluid\">\n        <Header score = {this.state.score} topScore = {this.state.topScore} />\n        <HeroDiv />\n        <div id=\"imgOuterDiv\">\n          {this.state.pokemonList.map(pokemonImg => (\n            <Pokemon\n              key = {pokemonImg.id}\n              id = {pokemonImg.id}\n              clcikCount = {pokemonImg.clcikCount}\n              image = {pokemonImg.image}\n              name = {pokemonImg.name}\n              imgClick = {this.imgClick}\n              score = {this.score}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}